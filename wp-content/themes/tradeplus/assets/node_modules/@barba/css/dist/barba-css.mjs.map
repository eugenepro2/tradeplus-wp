{"version":3,"file":"barba-css.mjs","sources":["../src/css.ts"],"sourcesContent":["/**\n * @barba/css\n * <br><br>\n * ## Barba CSS.\n *\n * - Add CSS classes\n * - Manage CSS transitions\n *\n * @module css\n * @preferred\n */\n\n/***/\n\n// Definitions\nimport {\n  IBarbaPlugin,\n  ITransitionData,\n  ITransitionPage,\n} from '@barba/core/src/defs';\n\nimport { Core } from '@barba/core/src/core';\nimport { Logger } from '@barba/core/src/modules/Logger';\n\nimport { ICssCallbacks } from './defs/css';\n\nimport { version } from '../package.json';\n\nclass Css implements IBarbaPlugin<{}> {\n  public name = '@barba/css';\n  public version = version;\n  public barba: Core;\n  public logger: Logger;\n\n  public prefix: string = 'barba';\n  public callbacks: ICssCallbacks = {};\n  public cb: any;\n\n  // Check if transition property applied\n  private _hasTransition: boolean = false;\n\n  /**\n   * Plugin installation.\n   */\n  public install(barba: Core) {\n    this.logger = new barba.Logger(this.name);\n    this.logger.print(this.version);\n    this.barba = barba;\n    this._appear = this._appear.bind(this);\n    this._leave = this._leave.bind(this);\n    this._enter = this._enter.bind(this);\n  }\n\n  /**\n   * Plugin installation.\n   */\n  public init() {\n    // Register hooks to get prefix\n    this.barba.hooks.before(this._getPrefix, this);\n    this.barba.hooks.beforeAppear(this._getPrefix, this);\n\n    // Register hook for CSS classes\n    this.barba.hooks.beforeAppear(this._beforeAppear, this);\n    this.barba.hooks.afterAppear(this._afterAppear, this);\n    this.barba.hooks.beforeLeave(this._beforeLeave, this);\n    this.barba.hooks.afterLeave(this._afterLeave, this);\n    this.barba.hooks.beforeEnter(this._beforeEnter, this);\n    this.barba.hooks.afterEnter(this._afterEnter, this);\n\n    // Override main transitions\n    this.barba.transitions.appear = this._appear;\n    this.barba.transitions.leave = this._leave;\n    this.barba.transitions.enter = this._enter;\n\n    // Add empty default transition (force prepend)\n    /* istanbul ignore next */\n    this.barba.transitions.store.all.unshift({\n      name: 'barba',\n      appear() {}, // tslint:disable-line:no-empty\n      leave() {}, // tslint:disable-line:no-empty\n      enter() {}, // tslint:disable-line:no-empty\n    });\n    this.barba.transitions.store.update();\n  }\n\n  /**\n   * Initial state.\n   */\n  public async start(container: HTMLElement, kind: string): Promise<void> {\n    // Set initial CSS values\n    this.add(container, kind); // CSS: add kind\n    await this.barba.helpers.nextTick();\n    // Apply CSS transition\n    this.add(container, `${kind}-active`); // CSS: add kind-active\n    await this.barba.helpers.nextTick();\n  }\n\n  /**\n   * Next frame state.\n   */\n  public async next(container: HTMLElement, kind: string): Promise<any> {\n    this._hasTransition = this._checkTransition(container);\n\n    if (this._hasTransition) {\n      // We need to listen the end of the animation\n      return new Promise(async resolve => {\n        this.cb = resolve;\n        this.callbacks[kind] = resolve;\n\n        container.addEventListener('transitionend', resolve, false);\n        await this.barba.helpers.nextTick();\n        this.remove(container, kind); // CSS: remove kind\n        // await this.barba.helpers.nextTick();\n        this.add(container, `${kind}-to`); // CSS: add kind-to\n        await this.barba.helpers.nextTick();\n      });\n    } else {\n      this.remove(container, kind); // CSS: remove kind\n      await this.barba.helpers.nextTick();\n      this.add(container, `${kind}-to`); // CSS: add kind-to\n      await this.barba.helpers.nextTick();\n    }\n  }\n\n  /**\n   * Final state.\n   */\n  public async end(container: HTMLElement, kind: string): Promise<void> {\n    this.remove(container, `${kind}-to`); // CSS: remove kind-to\n    this.remove(container, `${kind}-active`); // CSS: remove kind-active\n    container.removeEventListener('transitionend', this.callbacks[kind]);\n    this._hasTransition = false;\n  }\n\n  /**\n   * Add CSS classes.\n   */\n  public add(el: HTMLElement, step: string): void {\n    el.classList.add(`${this.prefix}-${step}`);\n  }\n\n  /**\n   * Remove CSS classes.\n   */\n  public remove(el: HTMLElement, step: string): void {\n    el.classList.remove(`${this.prefix}-${step}`);\n  }\n\n  /**\n   * Get CSS prefix from transition `name` property.\n   */\n  private _getPrefix(data: ITransitionData, t: ITransitionPage): void {\n    this.prefix = t.name || 'barba';\n  }\n\n  /**\n   * Check if CSS transition is applied\n   */\n  private _checkTransition(container: HTMLElement) {\n    // DEV: check for CSS animation property?\n    return getComputedStyle(container).transitionDuration !== '0s';\n  }\n\n  /**\n   * `beforeAppear` hook.\n   */\n  private _beforeAppear(data: ITransitionData): Promise<void> {\n    return this.start(data.current.container, 'appear');\n  }\n\n  /**\n   * `appear` hook.\n   */\n  private async _appear(\n    data: ITransitionData,\n    t: ITransitionPage\n  ): Promise<any> {\n    await this.barba.hooks.do('appear', data, t);\n\n    return this.next(data.current.container, 'appear');\n  }\n\n  /**\n   * `afterAppear` hook.\n   */\n  private _afterAppear(data: ITransitionData): Promise<void> {\n    return this.end(data.current.container, 'appear');\n  }\n\n  /**\n   * `beforeLeave` hook.\n   */\n  private _beforeLeave(data: ITransitionData): Promise<void> {\n    return this.start(data.current.container, 'leave');\n  }\n\n  /**\n   * `leave` hook.\n   */\n  private async _leave(\n    data: ITransitionData,\n    t: ITransitionPage\n  ): Promise<void> {\n    await this.barba.hooks.do('leave', data, t);\n\n    return this.next(data.current.container, 'leave');\n  }\n\n  /**\n   * `afterLeave` hook.\n   */\n  private _afterLeave(data: ITransitionData): Promise<void> {\n    this.end(data.current.container, 'leave');\n    // For CSS transitions, we need to remove current container\n    // directly after the leave transition\n    this.barba.transitions.remove(data);\n\n    return Promise.resolve();\n  }\n\n  /**\n   * `beforeEnter` hook.\n   */\n  private _beforeEnter(data: ITransitionData): Promise<void> {\n    return this.start(data.next.container, 'enter');\n  }\n\n  /**\n   * `enter` hook.\n   */\n  private async _enter(\n    data: ITransitionData,\n    t: ITransitionPage\n  ): Promise<void> {\n    await this.barba.hooks.do('enter', data, t);\n\n    return this.next(data.next.container, 'enter');\n  }\n\n  /**\n   * `afterEnter` hook.\n   */\n  private _afterEnter(data: ITransitionData): Promise<void> {\n    return this.end(data.next.container, 'enter');\n  }\n}\n\nconst css = new Css();\n\nexport default css;\n"],"names":["Css","constructor","install","barba","logger","Logger","this","name","print","version","_appear","bind","_leave","_enter","init","hooks","before","_getPrefix","beforeAppear","_beforeAppear","afterAppear","_afterAppear","beforeLeave","_beforeLeave","afterLeave","_afterLeave","beforeEnter","_beforeEnter","afterEnter","_afterEnter","transitions","appear","leave","enter","store","all","unshift","update","start","container","kind","add","_this","helpers","nextTick","next","_hasTransition","_this2","_checkTransition","Promise","resolve","cb","callbacks","addEventListener","remove","end","removeEventListener","el","step","classList","data","t","prefix","getComputedStyle","transitionDuration","current","_this4","do","_this5","_this6"],"mappings":"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"}